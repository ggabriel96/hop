---
- block: # git
  - name: Set global git user.name
    ansible.builtin.command:
      argv:
        - git
        - config
        - --global
        - user.name
        - "{{ git_user_name }}"
    when: git_user_name is defined

  - name: Set global git user.email
    ansible.builtin.command:
      argv:
        - git
        - config
        - --global
        - user.email
        - "{{ git_user_email }}"
    when: git_user_email is defined

- block: # SSH
  - name: Ensure keys directory exists
    ansible.builtin.file:
      path: "{{ ssh_keys_dir }}"
      state: directory

  - name: Generate SSH keys
    community.crypto.openssh_keypair:
      comment: "{{ ssh_keys_comment | default(git_user_email) | default(omit) }}"
      path: "{{ ssh_keys_dir + '/' + item }}"
      type: "{{ ssh_keys_type }}"
    loop: "{{ ssh_keys }}"
    register: generation_result

  - name: Add new SSH keys to SSH agent
    ansible.builtin.shell:
      cmd: eval "$(ssh-agent -s)" && ssh-add {{ generation_result.results | select("changed") | map(attribute="filename") | join(" ")  }}
      executable: /bin/bash
    when: generation_result is changed

- block: # login shell
  - name: Get path to chosen login shell
    ansible.builtin.command:
      argv:
        - which
        - "{{ user_login_shell }}"
    register: shell_path

  - name: Change login shell
    become: true
    ansible.builtin.user:
      name: "{{ ansible_env.USER }}"
      shell: "{{ shell_path.stdout }}"

- block: # download or link files, e.g. config
  - name: Check if provided mutually-exclusive `src` and `url`
    ansible.builtin.assert:
      that:
        - not (item.src is defined and item.url is defined)
      fail_msg: "`src` and `url` cannot be specified for the same config file."
    loop: "{{ user_files }}"

  - name: Create destination directories
    ansible.builtin.file:
      path: "{{ item.dest | dirname }}"
      state: directory
    loop: "{{ user_files }}"

  - name: Check existing files
    ansible.builtin.stat:
      path: "{{ item.dest }}"
    loop: "{{ user_files }}"
    register: stat_result

  - name: Backup existing files
    ansible.builtin.copy:
      src: "{{ item.path }}"
      dest: "{{ item.path | dirname }}/.backup/"
      force: yes
    loop: "{{ stat_result.results | map(attribute='stat') | selectattr('exists') | list }}"

  - name: Download remote files with `url`
    ansible.builtin.get_url:
      url: "{{ item.url }}"
      dest: "{{ item.dest }}"
    loop: "{{ user_files | selectattr('url', 'defined') | list }}"

  - name: Link local files with `src`
    ansible.builtin.file:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      state: link
      force: yes
    loop: "{{ user_files | selectattr('src', 'defined') | list }}"
